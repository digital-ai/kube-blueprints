apiVersion: xl/v2
kind: Blueprint
metadata:
  name: XL UP
  description: |
    This blueprint deploys DAI Deploy operator, DAI Release operator, and XL-k8s-foundation into an existing Kubernetes installation (local single-node Kubernetes, on-premises multi-node Kubernetes cluster, or Amazon EKS cluster).
  author: Digital.ai
  version: 1.0
spec:
  parameters:
    - name: ServerType
      type: Select
      prompt: "Product server you want to perform upgrade for"
      options:
        - label: Digital.ai Release
          value: daiRelease
        - label: Digital.ai Deploy
          value: daiDeploy
      saveInXlvals: true
      description: "Product server you want to perform upgrade for?"

    - name: ImageTag
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the image tag"
      default: 10.0.0
      description: "Enter the image tag to use"
    
    - name: OperatorImageDeploy
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Operator image to use"
      promptIf: !expr "ServerType == 'daiDeploy'"
      default: rprasaddigitalai/xld-operator:v1.0.0
      description: "Operator image to use"

    - name: UpgradeType
      type: Select
      prompt: "Select the type of upgrade you want."
      options:
        - label: Operator to Operator
          value: operatorToOperator
        - label: Helm to Operator
          value: helmToOperator
      saveInXlvals: true
      description: "Type of upgrade you want?"

    - name: OperatorImageRelease
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Operator image to use"
      promptIf: !expr "ServerType == 'daiRelease'"
      default: xebialabsunsupported/xlr-operator-nginx:0.0.1
      description: "Operator image to use"
      
    - name: CrName
      type: Input
      saveInXlvals: true
      promptIf: !expr "UpgradeType == 'operatorToOperator'"
      prompt: "Enter the name of custom resource."
      ignoreIfSkipped: true
      overrideDefault: true
      description: "The name of your custom resource"
    
    - name: CrdName
      type: Input
      saveInXlvals: true
      promptIf: !expr "UpgradeType == 'operatorToOperator'"
      prompt: "Enter the name of custom resource definition."
      ignoreIfSkipped: true
      overrideDefault: true
      description: "The name of your custom resource definition."
    
    - name: ReleaseName
      type: Input
      saveInXlvals: true
      promptIf: !expr "UpgradeType == 'helmToOperator'"
      prompt: "Enter the helm release name."
      ignoreIfSkipped: true
      overrideDefault: true
      description: "The name of your custom resource definition."

  files:
    # k8s-foundation
    - path: xebialabs/xl-k8s-foundation.yaml.tmpl
    
    # files to write if server to deploy is Deploy and kubernetes setup is docker desktop
    - path: xebialabs/dai-deploy/template-onprem/cluster-role-digital-proxy-role.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/cluster-role-manager-role.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/cluster-role-metrics-reader.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/controller-manager-metrics-service.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/custom-resource-definition.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/leader-election-role.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/leader-election-rolebinding.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/manager-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/proxy-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy/template-onprem/deployment.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-deploy-operator.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'PlainK8SCluster'"

    # files to write if server to deploy is Release and kubernetes environment is docker desktop
    - path: xebialabs/dai-release/template-onprem/cluster-role-digital-proxy-role.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/cluster-role-manager-role.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/cluster-role-metrics-reader.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/controller-manager-metrics-service.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/custom-resource-definition.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/leader-election-role.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/leader-election-rolebinding.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/manager-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/proxy-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release-operator.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"
    - path: xebialabs/dai-release/template-onprem/deployment.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'PlainK8SCluster'"

    # files to write if server to deploy is Deploy and kubernetes setup is openshift
    - path: xebialabs/dai-deploy/template-openshift/cluster-role-digital-proxy-role.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/cluster-role-manager-role.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/cluster-role-metrics-reader.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/controller-manager-metrics-service.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/custom-resource-definition.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/leader-election-role.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/leader-election-rolebinding.yaml
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/manager-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/proxy-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy/template-openshift/deployment.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-deploy-operator.yaml.tmpl
      writeIf: !expr "ServerType == 'daiDeploy' && K8sSetup == 'openshift'"

    # files to write if server to deploy is Release and kubernetes environment is openshift
    - path: xebialabs/dai-release/template-openshift/cluster-role-digital-proxy-role.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/cluster-role-manager-role.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/cluster-role-metrics-reader.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/controller-manager-metrics-service.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/custom-resource-definition.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/leader-election-role.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/leader-election-rolebinding.yaml
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/manager-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/proxy-rolebinding.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release-operator.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"
    - path: xebialabs/dai-release/template-openshift/deployment.yaml.tmpl
      writeIf: !expr "ServerType == 'daiRelease' && K8sSetup == 'openshift'"


    - path: xebialabs/common.yaml.tmpl
    - path: xebialabs/deployments.yaml.tmpl
    - path: generated_answers.yaml.tmpl
    - path: xebialabs.yaml.tmpl